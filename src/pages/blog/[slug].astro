---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Sidenotes from '../../components/Sidenotes.astro';
import Backlinks from '../../components/Backlinks.astro';

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Function to extract footnotes
function extractFootnotes(markdown) {
  let footnotes = [];
  const newContent = markdown.replace(/^\[\^(\d+)\]:\s*([\s\S]*?)(?=\n\n|\n\[\^|$)/gm, (_, number, text) => {
    footnotes.push({ number, text: text.trim() });
    return '';
  });
  
  return { footnotes };
}

const { footnotes } = extractFootnotes(entry.body);

// Split footnotes into left and right
const leftNotes = footnotes.filter((_, index) => index % 2 === 0);
const rightNotes = footnotes.filter((_, index) => index % 2 !== 0);
---

<Layout title={entry.data.title}>
  <div class="flex justify-center mx-auto max-w-screen-xl">
    <aside class="w-64 hidden lg:block relative">
      <div class="sticky top-4">
        <Sidenotes notes={leftNotes} side="left" />
      </div>
    </aside>
    <main class="w-full max-w-[750px] px-4">
      <article>
        <Content />
      </article>
      <footer class="mt-8 pt-8 border-t border-gray-200 lg:hidden">
        <h2 class="text-xl font-bold mb-4">Footnotes</h2>
        <ol class="list-decimal list-inside">
          {footnotes.map((note) => (
            <li id={`footnote-${note.number}`} class="mb-4">
              <span set:html={note.text} />
              <a href={`#footnote-ref-${note.number}`} class="ml-2 text-blue-500">&uarr; Return</a>
            </li>
          ))}
        </ol>
      </footer>
    </main>
    <aside class="w-64 hidden lg:block relative">
      <div class="sticky top-4">
        <Sidenotes notes={rightNotes} side="right" />
      </div>
    </aside>
  </div>

  <Backlinks currentPage={Astro.url.pathname}/>
</Layout>

<style is:global>
  .sidenote-ref {
    cursor: pointer;
    color: #0000FF;
    text-decoration: none;
  }

  .sidenote {
    position: absolute;
    width: 200px;
    font-size: 0.9em;
    line-height: 1.3;
    transition: background-color 0.3s ease;
  }

  .sidenote-left {
    right: 1em;
    text-align: right;
  }

  .sidenote-right {
    left: 1em;
    text-align: left;
  }

  .highlight {
    background-color: yellow;
  }

  @media (max-width: 1023px) {
    .sidenote-ref {
      vertical-align: super;
      font-size: smaller;
    }
  }
</style>

<script>
  function positionSidenotes() {
    document.querySelectorAll('.sidenote-ref').forEach(ref => {
      const noteId = ref.getAttribute('data-note-id');
      const sidenote = document.getElementById(`sidenote-${noteId}`);
      if (sidenote) {
        const refRect = ref.getBoundingClientRect();
        const articleRect = ref.closest('article').getBoundingClientRect();
        sidenote.style.top = `${refRect.top - articleRect.top}px`;
      }
    });
  }

  function addHoverEffects() {
    document.querySelectorAll('.sidenote-ref, .sidenote').forEach(el => {
      el.addEventListener('mouseenter', () => {
        const noteId = el.classList.contains('sidenote-ref') ? el.getAttribute('data-note-id') : el.id.replace('sidenote-', '');
        const ref = document.querySelector(`.sidenote-ref[data-note-id="${noteId}"]`);
        const sidenote = document.getElementById(`sidenote-${noteId}`);
        
        if (ref) ref.classList.add('highlight');
        if (sidenote) sidenote.classList.add('highlight');
      });

      el.addEventListener('mouseleave', () => {
        const noteId = el.classList.contains('sidenote-ref') ? el.getAttribute('data-note-id') : el.id.replace('sidenote-', '');
        const ref = document.querySelector(`.sidenote-ref[data-note-id="${noteId}"]`);
        const sidenote = document.getElementById(`sidenote-${noteId}`);
        
        if (ref) ref.classList.remove('highlight');
        if (sidenote) sidenote.classList.remove('highlight');
      });
    });
  }

  function setupFootnoteLinks() {
    document.querySelectorAll('.sidenote-ref').forEach(ref => {
      ref.addEventListener('click', (e) => {
        if (window.innerWidth < 1024) {  // Only for smaller screens
          e.preventDefault();
          const noteId = ref.getAttribute('data-note-id');
          const footnote = document.getElementById(`footnote-${noteId}`);
          if (footnote) {
            footnote.scrollIntoView({ behavior: 'smooth' });
          }
        }
      });
    });
  }

  // Position sidenotes, add hover effects, and setup footnote links on load and resize
  window.addEventListener('load', () => {
    positionSidenotes();
    addHoverEffects();
    setupFootnoteLinks();
  });
  window.addEventListener('resize', () => {
    positionSidenotes();
    setupFootnoteLinks();
  });

  // Convert footnote links to sidenote references
  document.querySelectorAll('sup a').forEach(ref => {
    const footnoteId = ref.getAttribute('href').substring(1);
    ref.classList.add('sidenote-ref');
    ref.setAttribute('data-note-id', footnoteId.replace('user-content-fn-', ''));
    ref.id = `footnote-ref-${footnoteId.replace('user-content-fn-', '')}`;
    if (window.innerWidth >= 1024) {
      ref.removeAttribute('href');
    } else {
      ref.setAttribute('href', `#${footnoteId}`);
    }
  });

  // Remove the auto-generated footnotes section at the bottom of the page
  const footnoteSection = document.querySelector('.footnotes');
  if (footnoteSection) {
    footnoteSection.remove();
  }
</script>